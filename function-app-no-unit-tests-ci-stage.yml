###############################################################################
# Author: `Jensen (jemilraj@cmhc-schl.gc.ca)
# Name: function-app-no-unit-tests-ci-stage (TEMPLATE)
#
# This generic template defines the steps required to build and package
# a Function App. It is intended to be used by all Function App pipelines.
###############################################################################

parameters:
  # Specifies the agent pool to use for build activities.
- name: pool
  type: object
  default:
    vmImage: 'ubuntu-latest'

  # Specifies whether or not to publish pipeline scripts.
  # In order to leverage custom scripts in a multi stage pipeline, this must be set to true.
- name: pipelineScripts
  type: string
  default: ''

  # Specifies the path of where the custom pipeline scripts reside.
- name: pipelineScriptsPath
  type: string
  default: 'devops/pipelines/scripts'

  # Specifies the path of the function app shell arm template.
- name: templateShellFilePath
  type: string
  default: 'devops/arm-templates/function-app-shell'

  # Specifies the project name to use in SonarQube.
- name: projectName
  type: string
  default: $(Build.DefinitionName)

  # Specifies the path of the project to build.
- name: sourcePath
  type: string
  default: $(sourcePath)

  # Specifies the name of the artifact that is created.
- name: artifactName
  type: string
  default: $(artifactName)

################################################################################
# BUILD STAGE
################################################################################

stages:

  # The build stage is the first logical boundary in an ARM template pipeline.
- stage: build
  displayName: 'Build'

  # Series of steps that are executed sequentially as a unit.
  # This is the smallest unit of work that represents the build of an ARM template.
  jobs:

  - job: build
    displayName: 'Build'

    pool:
      ${{ insert }}: ${{ parameters.pool }}

    steps:
    # Transforms pipelines variables using PowerShell expressions.
    - task: PowerShell@2
      displayName: 'Transform Pipeline Variables'
      inputs:
        targetType: 'inline'
        script: |
          Get-ChildItem Env:* | % {
            if ($_.Value.StartsWith("pwsh: ")) {
              $result = Invoke-Expression $_.Value.Replace("pwsh: ", "")
              if ($result -ne $_.Value) {
                Write-Host ("##vso[task.setvariable variable=$($_.Name);]$result")
              }
            }
          }
        pwsh: true

      # If pipeline scripts are supplied to the template, they are copied
      # over to the staging directory so that they can be published.
    - ${{ if ne(parameters.pipelineScripts, '') }}:
      - task: CopyFiles@2
        displayName: 'Copy Pipeline Scripts to Staging Directory'
        inputs:
          SourceFolder: ${{ parameters.pipelineScriptsPath }}
          Contents: ${{ parameters.pipelineScripts }}
          TargetFolder: '$(Build.ArtifactStagingDirectory)/scripts'
          CleanTargetFolder: true
          OverWrite: true
          flattenFolders: false

      # Builds the Function App in Release mode.
    - task: DotNetCoreCLI@2
      displayName: 'Build Function App'
      inputs:
        command: 'build'
        projects: '${{ parameters.sourcePath }}/*.csproj'
        arguments: '--configuration Release'

      # Publishes the Function App in Release mode.
      # The Function App is zipped and placed in the staging directory so that it can be published.
    - task: DotNetCoreCLI@2
      displayName: 'Publish Function App'
      inputs:
        command: publish
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
        projects: '${{ parameters.sourcePath }}/*.csproj'
        publishWebProjects: false
        modifyOutputPath: true
        zipAfterPublish: true

      # Copies the ARM Template Shell to the staging directory so that is can be pubslihed.
    - task: CopyFiles@2
      displayName: 'Copy ARM Template Shell to Staging Directory'
      inputs:
        SourceFolder: ${{ parameters.templateShellFilePath }}
        Contents: '*.json'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: false
        OverWrite: true
        flattenFolders: false

      # Publish Pipeline Artifacts
      # The ARM template is published so that it can be consumed in multi stage pipelines.
    - publish: $(Build.ArtifactStagingDirectory)
      displayName: 'Publish Pipeline Artifacts'
      artifact: ${{ parameters.artifactName }}