###############################################################################
# Author: `Jensen (jemilraj@cmhc-schl.gc.ca)
# Name: data-model-ci-stage
#
# This generic template defines the steps required to build a data model.
# It is intended to be used by all data model pipelines.
###############################################################################

################################################################################
# MANDATORY TEMPLATE PARAMETERS
################################################################################

parameters:

  # Specifies the agent pool to use for build activities.
  - name: pool
    type: object
    default:
      vmImage: 'ubuntu-latest'

  # Specifies the source path of the data model to build.
  - name: sourcePath
    type: string
    default: $(sourcePath)

  # Specifies the path of data model's SQL project file.
  - name: projectFilePath
    type: string
    default: $(projectFilePath)

  # Specifies the path to the file or directory to publish.
  - name: publishPath
    type: string
    default: $(Build.ArtifactStagingDirectory)

  # Specifies the name of the artifact that is created.
  - name: artifactName
    type: string
    default: $(artifactName)

################################################################################
# BUILD STAGE
################################################################################

stages:

# The build stage is the first logical boundary in a data model pipeline.
- stage: build
  displayName: 'Build'

  # Series of steps that are executed sequentially as a unit.
  # This is the smallest unit of work that represents the build of a data model.
  jobs:
  - job: build
    displayName: 'Build'

    # The agent pool associated with the build.
    pool:
      ${{ insert }}: ${{ parameters.pool }}

    # The sequence of steps that make up the build.
    steps:
      # Transforms pipelines variables using PowerShell expressions.
      - task: PowerShell@2
        displayName: 'Transform Pipeline Variables'
        inputs:
          targetType: 'inline'
          script: |
            Get-ChildItem Env:* | % {
              if ($_.Value.StartsWith("pwsh: ")) {
                $result = Invoke-Expression $_.Value.Replace("pwsh: ", "")
                if ($result -ne $_.Value) {
                  Write-Host ("##vso[task.setvariable variable=$($_.Name);]$result")
                }
              }
            }
          pwsh: true

      # Build the SQL project file in Release mode.
      # This step produces the DACPAC artifact.
      - task: MSBuild@1
        displayName: 'Build Data Model'
        inputs:
          solution: ${{ parameters.projectFilePath }}
          msbuildArchitecture: 'x64'
          configuration: 'Release'
          msbuildArguments: '/p:DSP="Microsoft.Data.Tools.Schema.Sql.SqlAzureV12DatabaseSchemaProvider"'

      # Copy DACPAC artifact from the bin directory to the staging directory.
      - task: CopyFiles@2
        displayName: 'Copy DACPAC Artifact'
        inputs:
          SourceFolder: ${{ parameters.sourcePath }}
          Contents: '**/*.dacpac'
          TargetFolder: ${{ parameters.publishPath }}
          CleanTargetFolder: true
          OverWrite: true
          flattenFolders: true

      # Publish DACPAC Artifact.
      # The DACPAC artifact is published so that it can be consumed in multi stage pipelines.
      - publish: ${{ parameters.publishPath }}
        displayName: 'Publish DACPAC Artifact'
        artifact: ${{ parameters.artifactName }}